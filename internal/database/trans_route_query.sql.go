// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: trans_route_query.sql

package database

import (
	"context"
	"database/sql"
)

const addRoute = `-- name: AddRoute :execresult
INSERT INTO routes (
    route_start_location, route_end_location, route_estimated_duration, route_created_at, route_updated_at
) VALUES (
    ?, ?, ?, ?, ?
)
`

type AddRouteParams struct {
	RouteStartLocation     string
	RouteEndLocation       string
	RouteEstimatedDuration int32
	RouteCreatedAt         sql.NullTime
	RouteUpdatedAt         sql.NullTime
}

func (q *Queries) AddRoute(ctx context.Context, arg AddRouteParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, addRoute,
		arg.RouteStartLocation,
		arg.RouteEndLocation,
		arg.RouteEstimatedDuration,
		arg.RouteCreatedAt,
		arg.RouteUpdatedAt,
	)
}

const deleteForceRoute = `-- name: DeleteForceRoute :exec
DELETE FROM routes WHERE route_id = ?
`

func (q *Queries) DeleteForceRoute(ctx context.Context, routeID int32) error {
	_, err := q.db.ExecContext(ctx, deleteForceRoute, routeID)
	return err
}

const deleteRoute = `-- name: DeleteRoute :exec
UPDATE routes
SET route_deleted_at = NOW()
WHERE route_id = ?
`

func (q *Queries) DeleteRoute(ctx context.Context, routeID int32) error {
	_, err := q.db.ExecContext(ctx, deleteRoute, routeID)
	return err
}

const getRouteById = `-- name: GetRouteById :one
SELECT route_id, route_start_location, route_end_location, route_estimated_duration, route_created_at, route_updated_at, route_deleted_at
FROM ` + "`" + `routes` + "`" + `
WHERE route_id = ?
`

func (q *Queries) GetRouteById(ctx context.Context, routeID int32) (Route, error) {
	row := q.db.QueryRowContext(ctx, getRouteById, routeID)
	var i Route
	err := row.Scan(
		&i.RouteID,
		&i.RouteStartLocation,
		&i.RouteEndLocation,
		&i.RouteEstimatedDuration,
		&i.RouteCreatedAt,
		&i.RouteUpdatedAt,
		&i.RouteDeletedAt,
	)
	return i, err
}

const updateRoute = `-- name: UpdateRoute :execrows
UPDATE routes
SET route_updated_at = NOW(), route_start_location = ?, route_end_location = ?, route_estimated_duration = ?
WHERE route_id = ? AND route_updated_at = ? AND route_deleted_at IS NULL
`

type UpdateRouteParams struct {
	RouteStartLocation     string
	RouteEndLocation       string
	RouteEstimatedDuration int32
	RouteID                int32
	RouteUpdatedAt         sql.NullTime
}

func (q *Queries) UpdateRoute(ctx context.Context, arg UpdateRouteParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, updateRoute,
		arg.RouteStartLocation,
		arg.RouteEndLocation,
		arg.RouteEstimatedDuration,
		arg.RouteID,
		arg.RouteUpdatedAt,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}
