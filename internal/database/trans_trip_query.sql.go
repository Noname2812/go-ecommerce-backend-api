// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: trans_trip_query.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const addTrip = `-- name: AddTrip :execresult
INSERT INTO trips (
    trip_departure_time, trip_arrival_time, trip_base_price, trip_created_at, trip_updated_at
) VALUES (
    ?, ?, ?, ?, ?
)
`

type AddTripParams struct {
	TripDepartureTime time.Time
	TripArrivalTime   time.Time
	TripBasePrice     string
	TripCreatedAt     sql.NullTime
	TripUpdatedAt     sql.NullTime
}

func (q *Queries) AddTrip(ctx context.Context, arg AddTripParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, addTrip,
		arg.TripDepartureTime,
		arg.TripArrivalTime,
		arg.TripBasePrice,
		arg.TripCreatedAt,
		arg.TripUpdatedAt,
	)
}

const deleteForceTrip = `-- name: DeleteForceTrip :exec
DELETE FROM trips WHERE trip_id = ?
`

func (q *Queries) DeleteForceTrip(ctx context.Context, tripID int64) error {
	_, err := q.db.ExecContext(ctx, deleteForceTrip, tripID)
	return err
}

const deleteTrip = `-- name: DeleteTrip :exec
UPDATE trips
SET trip_deleted_at = NOW()
WHERE trip_id = ?
`

func (q *Queries) DeleteTrip(ctx context.Context, tripID int64) error {
	_, err := q.db.ExecContext(ctx, deleteTrip, tripID)
	return err
}

const getTripById = `-- name: GetTripById :one
SELECT trip_id, route_id, bus_id, trip_departure_time, trip_arrival_time, trip_base_price, trip_created_at, trip_updated_at, trip_deleted_at
FROM ` + "`" + `trips` + "`" + `
WHERE trip_id = ?
`

func (q *Queries) GetTripById(ctx context.Context, tripID int64) (Trip, error) {
	row := q.db.QueryRowContext(ctx, getTripById, tripID)
	var i Trip
	err := row.Scan(
		&i.TripID,
		&i.RouteID,
		&i.BusID,
		&i.TripDepartureTime,
		&i.TripArrivalTime,
		&i.TripBasePrice,
		&i.TripCreatedAt,
		&i.TripUpdatedAt,
		&i.TripDeletedAt,
	)
	return i, err
}

const updateTrip = `-- name: UpdateTrip :execrows
UPDATE trips
SET trip_updated_at = NOW(), trip_departure_time = ?, trip_arrival_time = ?, trip_base_price = ?
WHERE trip_id = ? AND trip_updated_at = ? AND trip_deleted_at IS NULL
`

type UpdateTripParams struct {
	TripDepartureTime time.Time
	TripArrivalTime   time.Time
	TripBasePrice     string
	TripID            int64
	TripUpdatedAt     sql.NullTime
}

func (q *Queries) UpdateTrip(ctx context.Context, arg UpdateTripParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, updateTrip,
		arg.TripDepartureTime,
		arg.TripArrivalTime,
		arg.TripBasePrice,
		arg.TripID,
		arg.TripUpdatedAt,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}
