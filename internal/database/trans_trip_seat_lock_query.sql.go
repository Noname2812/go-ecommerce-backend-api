// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: trans_trip_seat_lock_query.sql

package database

import (
	"context"
	"database/sql"
)

const addTripSeatLock = `-- name: AddTripSeatLock :execresult
INSERT INTO trip_seat_locks (
    trip_id, seat_id, locked_by_booking_id, trip_seat_lock_status, trip_seat_lock_expires_at
) VALUES (
    ?, ?, ?, ?, ?
)
`

type AddTripSeatLockParams struct {
	TripID                int64
	SeatID                int64
	LockedByBookingID     sql.NullInt64
	TripSeatLockStatus    uint8
	TripSeatLockExpiresAt sql.NullTime
}

func (q *Queries) AddTripSeatLock(ctx context.Context, arg AddTripSeatLockParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, addTripSeatLock,
		arg.TripID,
		arg.SeatID,
		arg.LockedByBookingID,
		arg.TripSeatLockStatus,
		arg.TripSeatLockExpiresAt,
	)
}

const createOrUpdateSeatLock = `-- name: CreateOrUpdateSeatLock :exec
INSERT INTO trip_seat_locks (
    trip_id,
    seat_id,
    locked_by_booking_id,
    trip_seat_lock_status,
    trip_seat_lock_expires_at
) VALUES (?, ?, ?, ?, ?)
ON DUPLICATE KEY UPDATE
    trip_seat_lock_status = VALUES(trip_seat_lock_status),
    locked_by_booking_id = VALUES(locked_by_booking_id),
    trip_seat_lock_expires_at = VALUES(trip_seat_lock_expires_at)
`

type CreateOrUpdateSeatLockParams struct {
	TripID                int64
	SeatID                int64
	LockedByBookingID     sql.NullInt64
	TripSeatLockStatus    uint8
	TripSeatLockExpiresAt sql.NullTime
}

func (q *Queries) CreateOrUpdateSeatLock(ctx context.Context, arg CreateOrUpdateSeatLockParams) error {
	_, err := q.db.ExecContext(ctx, createOrUpdateSeatLock,
		arg.TripID,
		arg.SeatID,
		arg.LockedByBookingID,
		arg.TripSeatLockStatus,
		arg.TripSeatLockExpiresAt,
	)
	return err
}

const deleteForceTripSeatLock = `-- name: DeleteForceTripSeatLock :exec
DELETE FROM trip_seat_locks WHERE trip_seat_lock_id = ?
`

func (q *Queries) DeleteForceTripSeatLock(ctx context.Context, tripSeatLockID int64) error {
	_, err := q.db.ExecContext(ctx, deleteForceTripSeatLock, tripSeatLockID)
	return err
}

const deleteTripSeatLock = `-- name: DeleteTripSeatLock :exec
UPDATE trip_seat_locks
SET trip_seat_lock_deleted_at = NOW()
WHERE trip_seat_lock_id = ?
`

func (q *Queries) DeleteTripSeatLock(ctx context.Context, tripSeatLockID int64) error {
	_, err := q.db.ExecContext(ctx, deleteTripSeatLock, tripSeatLockID)
	return err
}

const getMapSeatLockByTripId = `-- name: GetMapSeatLockByTripId :many
SELECT 
    s.seat_id,
    s.seat_number,
    s.seat_row_no,
    s.seat_column_no,
    s.seat_floor_no,
    s.seat_type,
    tsl.locked_by_booking_id,
    COALESCE(tsl.trip_seat_lock_status, 1) AS trip_seat_lock_status,
    tsl.trip_seat_lock_expires_at
FROM trips t
JOIN seats s ON t.bus_id = s.bus_id
LEFT JOIN trip_seat_locks tsl 
    ON s.seat_id = tsl.seat_id 
    AND tsl.trip_id = t.trip_id 
    AND tsl.trip_seat_lock_deleted_at IS NULL
WHERE t.trip_id = ?
ORDER BY s.seat_row_no, s.seat_column_no
`

type GetMapSeatLockByTripIdRow struct {
	SeatID                int32
	SeatNumber            string
	SeatRowNo             uint8
	SeatColumnNo          uint8
	SeatFloorNo           uint8
	SeatType              uint8
	LockedByBookingID     sql.NullInt64
	TripSeatLockStatus    uint8
	TripSeatLockExpiresAt sql.NullTime
}

func (q *Queries) GetMapSeatLockByTripId(ctx context.Context, tripID int64) ([]GetMapSeatLockByTripIdRow, error) {
	rows, err := q.db.QueryContext(ctx, getMapSeatLockByTripId, tripID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetMapSeatLockByTripIdRow
	for rows.Next() {
		var i GetMapSeatLockByTripIdRow
		if err := rows.Scan(
			&i.SeatID,
			&i.SeatNumber,
			&i.SeatRowNo,
			&i.SeatColumnNo,
			&i.SeatFloorNo,
			&i.SeatType,
			&i.LockedByBookingID,
			&i.TripSeatLockStatus,
			&i.TripSeatLockExpiresAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTripSeatLockById = `-- name: GetTripSeatLockById :one
SELECT trip_seat_lock_id, trip_id, seat_id, locked_by_booking_id, trip_seat_lock_status, trip_seat_lock_expires_at, trip_seat_lock_created_at, trip_seat_lock_updated_at, trip_seat_lock_deleted_at
FROM ` + "`" + `trip_seat_locks` + "`" + `
WHERE trip_seat_lock_id = ?
`

func (q *Queries) GetTripSeatLockById(ctx context.Context, tripSeatLockID int64) (TripSeatLock, error) {
	row := q.db.QueryRowContext(ctx, getTripSeatLockById, tripSeatLockID)
	var i TripSeatLock
	err := row.Scan(
		&i.TripSeatLockID,
		&i.TripID,
		&i.SeatID,
		&i.LockedByBookingID,
		&i.TripSeatLockStatus,
		&i.TripSeatLockExpiresAt,
		&i.TripSeatLockCreatedAt,
		&i.TripSeatLockUpdatedAt,
		&i.TripSeatLockDeletedAt,
	)
	return i, err
}

const updateTripSeatLock = `-- name: UpdateTripSeatLock :execrows
UPDATE trip_seat_locks
SET booking_updated_at = NOW(), seat_id = ?, locked_by_booking_id = ?, trip_seat_lock_status = ?,
    trip_seat_lock_expires_at = ?
WHERE trip_seat_lock_id = ? AND trip_seat_lock_updated_at = ? AND trip_seat_lock_deleted_at IS NULL
`

type UpdateTripSeatLockParams struct {
	SeatID                int64
	LockedByBookingID     sql.NullInt64
	TripSeatLockStatus    uint8
	TripSeatLockExpiresAt sql.NullTime
	TripSeatLockID        int64
	TripSeatLockUpdatedAt sql.NullTime
}

func (q *Queries) UpdateTripSeatLock(ctx context.Context, arg UpdateTripSeatLockParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, updateTripSeatLock,
		arg.SeatID,
		arg.LockedByBookingID,
		arg.TripSeatLockStatus,
		arg.TripSeatLockExpiresAt,
		arg.TripSeatLockID,
		arg.TripSeatLockUpdatedAt,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}
