// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: booking_seat_booking_query.sql

package database

import (
	"context"
	"database/sql"
)

const addSeatBooking = `-- name: AddSeatBooking :execresult
INSERT INTO seat_bookings (
    booking_id, seat_booking_seat_number, seat_booking_price, passenger_name, passenger_phone,
    seat_booking_created_at, seat_booking_updated_at
) VALUES (
    ?, ?, ?, ?, ?, ?, ?
)
`

type AddSeatBookingParams struct {
	BookingID             string
	SeatBookingSeatNumber string
	SeatBookingPrice      string
	PassengerName         string
	PassengerPhone        string
	SeatBookingCreatedAt  sql.NullTime
	SeatBookingUpdatedAt  sql.NullTime
}

func (q *Queries) AddSeatBooking(ctx context.Context, arg AddSeatBookingParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, addSeatBooking,
		arg.BookingID,
		arg.SeatBookingSeatNumber,
		arg.SeatBookingPrice,
		arg.PassengerName,
		arg.PassengerPhone,
		arg.SeatBookingCreatedAt,
		arg.SeatBookingUpdatedAt,
	)
}

const deleteForceSeatBooking = `-- name: DeleteForceSeatBooking :exec
DELETE FROM seat_bookings WHERE seat_booking_id = ?
`

func (q *Queries) DeleteForceSeatBooking(ctx context.Context, seatBookingID int64) error {
	_, err := q.db.ExecContext(ctx, deleteForceSeatBooking, seatBookingID)
	return err
}

const deleteSeatBooking = `-- name: DeleteSeatBooking :exec
UPDATE seat_bookings
SET seat_booking_deleted_at = NOW()
WHERE seat_booking_id = ?
`

func (q *Queries) DeleteSeatBooking(ctx context.Context, seatBookingID int64) error {
	_, err := q.db.ExecContext(ctx, deleteSeatBooking, seatBookingID)
	return err
}

const getSeatBookingById = `-- name: GetSeatBookingById :one
SELECT seat_booking_id, booking_id, seat_booking_seat_number, seat_booking_price, passenger_name, passenger_phone, seat_booking_created_at, seat_booking_updated_at, seat_booking_deleted_at
FROM ` + "`" + `seat_bookings` + "`" + `
WHERE seat_booking_id = ?
`

func (q *Queries) GetSeatBookingById(ctx context.Context, seatBookingID int64) (SeatBooking, error) {
	row := q.db.QueryRowContext(ctx, getSeatBookingById, seatBookingID)
	var i SeatBooking
	err := row.Scan(
		&i.SeatBookingID,
		&i.BookingID,
		&i.SeatBookingSeatNumber,
		&i.SeatBookingPrice,
		&i.PassengerName,
		&i.PassengerPhone,
		&i.SeatBookingCreatedAt,
		&i.SeatBookingUpdatedAt,
		&i.SeatBookingDeletedAt,
	)
	return i, err
}

const updateSeatBooking = `-- name: UpdateSeatBooking :execrows
UPDATE seat_bookings
SET booking_updated_at = NOW(), seat_booking_seat_number = ?, seat_booking_price = ?, passenger_name = ?,
    passenger_phone = ?
WHERE seat_booking_id = ? AND seat_booking_updated_at = ? AND seat_booking_deleted_at IS NULL
`

type UpdateSeatBookingParams struct {
	SeatBookingSeatNumber string
	SeatBookingPrice      string
	PassengerName         string
	PassengerPhone        string
	SeatBookingID         int64
	SeatBookingUpdatedAt  sql.NullTime
}

func (q *Queries) UpdateSeatBooking(ctx context.Context, arg UpdateSeatBookingParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, updateSeatBooking,
		arg.SeatBookingSeatNumber,
		arg.SeatBookingPrice,
		arg.PassengerName,
		arg.PassengerPhone,
		arg.SeatBookingID,
		arg.SeatBookingUpdatedAt,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}
