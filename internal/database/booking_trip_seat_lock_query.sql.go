// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: booking_trip_seat_lock_query.sql

package database

import (
	"context"
	"database/sql"
)

const addTripSeatLock = `-- name: AddTripSeatLock :execresult
INSERT INTO trip_seat_locks (
    trip_id, trip_seat_lock_seat_number, locked_by_booking_id, trip_seat_lock_status, trip_seat_lock_expires_at,
    trip_seat_lock_created_at, trip_seat_lock_updated_at
) VALUES (
    ?, ?, ?, ?, ?, ?, ?
)
`

type AddTripSeatLockParams struct {
	TripID                 int64
	TripSeatLockSeatNumber string
	LockedByBookingID      sql.NullInt64
	TripSeatLockStatus     int8
	TripSeatLockExpiresAt  sql.NullTime
	TripSeatLockCreatedAt  sql.NullTime
	TripSeatLockUpdatedAt  sql.NullTime
}

func (q *Queries) AddTripSeatLock(ctx context.Context, arg AddTripSeatLockParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, addTripSeatLock,
		arg.TripID,
		arg.TripSeatLockSeatNumber,
		arg.LockedByBookingID,
		arg.TripSeatLockStatus,
		arg.TripSeatLockExpiresAt,
		arg.TripSeatLockCreatedAt,
		arg.TripSeatLockUpdatedAt,
	)
}

const deleteForceTripSeatLock = `-- name: DeleteForceTripSeatLock :exec
DELETE FROM trip_seat_locks WHERE trip_seat_lock_id = ?
`

func (q *Queries) DeleteForceTripSeatLock(ctx context.Context, tripSeatLockID int64) error {
	_, err := q.db.ExecContext(ctx, deleteForceTripSeatLock, tripSeatLockID)
	return err
}

const deleteTripSeatLock = `-- name: DeleteTripSeatLock :exec
UPDATE trip_seat_locks
SET trip_seat_lock_deleted_at = NOW()
WHERE trip_seat_lock_id = ?
`

func (q *Queries) DeleteTripSeatLock(ctx context.Context, tripSeatLockID int64) error {
	_, err := q.db.ExecContext(ctx, deleteTripSeatLock, tripSeatLockID)
	return err
}

const getTripSeatLockById = `-- name: GetTripSeatLockById :one
SELECT trip_seat_lock_id, trip_id, trip_seat_lock_seat_number, locked_by_booking_id, trip_seat_lock_status, trip_seat_lock_expires_at, trip_seat_lock_created_at, trip_seat_lock_updated_at, trip_seat_lock_deleted_at
FROM ` + "`" + `trip_seat_locks` + "`" + `
WHERE trip_seat_lock_id = ?
`

func (q *Queries) GetTripSeatLockById(ctx context.Context, tripSeatLockID int64) (TripSeatLock, error) {
	row := q.db.QueryRowContext(ctx, getTripSeatLockById, tripSeatLockID)
	var i TripSeatLock
	err := row.Scan(
		&i.TripSeatLockID,
		&i.TripID,
		&i.TripSeatLockSeatNumber,
		&i.LockedByBookingID,
		&i.TripSeatLockStatus,
		&i.TripSeatLockExpiresAt,
		&i.TripSeatLockCreatedAt,
		&i.TripSeatLockUpdatedAt,
		&i.TripSeatLockDeletedAt,
	)
	return i, err
}

const updateTripSeatLock = `-- name: UpdateTripSeatLock :execrows
UPDATE trip_seat_locks
SET booking_updated_at = NOW(), trip_seat_lock_seat_number = ?, locked_by_booking_id = ?, trip_seat_lock_status = ?,
    trip_seat_lock_expires_at = ?
WHERE trip_seat_lock_id = ? AND trip_seat_lock_updated_at = ? AND trip_seat_lock_deleted_at IS NULL
`

type UpdateTripSeatLockParams struct {
	TripSeatLockSeatNumber string
	LockedByBookingID      sql.NullInt64
	TripSeatLockStatus     int8
	TripSeatLockExpiresAt  sql.NullTime
	TripSeatLockID         int64
	TripSeatLockUpdatedAt  sql.NullTime
}

func (q *Queries) UpdateTripSeatLock(ctx context.Context, arg UpdateTripSeatLockParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, updateTripSeatLock,
		arg.TripSeatLockSeatNumber,
		arg.LockedByBookingID,
		arg.TripSeatLockStatus,
		arg.TripSeatLockExpiresAt,
		arg.TripSeatLockID,
		arg.TripSeatLockUpdatedAt,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}
