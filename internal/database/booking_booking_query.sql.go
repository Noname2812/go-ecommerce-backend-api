// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: booking_booking_query.sql

package database

import (
	"context"
	"database/sql"
)

const addBooking = `-- name: AddBooking :execresult
INSERT INTO bookings (
    trip_id, user_id, booking_total_price, booking_status, booking_contact_name,
    booking_contact_phone, booking_contact_email, booking_note, booking_created_at, booking_updated_at
) VALUES (
    ?, ?, ?, ?, ?, ?, ?, ?, ?, ?
)
`

type AddBookingParams struct {
	TripID              int64
	UserID              sql.NullInt64
	BookingTotalPrice   string
	BookingStatus       int8
	BookingContactName  string
	BookingContactPhone string
	BookingContactEmail string
	BookingNote         sql.NullString
	BookingCreatedAt    sql.NullTime
	BookingUpdatedAt    sql.NullTime
}

func (q *Queries) AddBooking(ctx context.Context, arg AddBookingParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, addBooking,
		arg.TripID,
		arg.UserID,
		arg.BookingTotalPrice,
		arg.BookingStatus,
		arg.BookingContactName,
		arg.BookingContactPhone,
		arg.BookingContactEmail,
		arg.BookingNote,
		arg.BookingCreatedAt,
		arg.BookingUpdatedAt,
	)
}

const deleteBooking = `-- name: DeleteBooking :exec
UPDATE bookings
SET booking_deleted_at = NOW()
WHERE booking_id = ?
`

func (q *Queries) DeleteBooking(ctx context.Context, bookingID string) error {
	_, err := q.db.ExecContext(ctx, deleteBooking, bookingID)
	return err
}

const deleteForceBooking = `-- name: DeleteForceBooking :exec
DELETE FROM bookings WHERE booking_id = ?
`

func (q *Queries) DeleteForceBooking(ctx context.Context, bookingID string) error {
	_, err := q.db.ExecContext(ctx, deleteForceBooking, bookingID)
	return err
}

const getBookingById = `-- name: GetBookingById :one
SELECT booking_id, trip_id, user_id, booking_total_price, booking_status, booking_contact_name, booking_contact_phone, booking_contact_email, booking_note, booking_created_at, booking_updated_at, booking_deleted_at
FROM ` + "`" + `bookings` + "`" + `
WHERE booking_id = ?
`

func (q *Queries) GetBookingById(ctx context.Context, bookingID string) (Booking, error) {
	row := q.db.QueryRowContext(ctx, getBookingById, bookingID)
	var i Booking
	err := row.Scan(
		&i.BookingID,
		&i.TripID,
		&i.UserID,
		&i.BookingTotalPrice,
		&i.BookingStatus,
		&i.BookingContactName,
		&i.BookingContactPhone,
		&i.BookingContactEmail,
		&i.BookingNote,
		&i.BookingCreatedAt,
		&i.BookingUpdatedAt,
		&i.BookingDeletedAt,
	)
	return i, err
}

const updateBooking = `-- name: UpdateBooking :execrows
UPDATE bookings
SET booking_updated_at = NOW(), booking_total_price = ?, booking_status = ?, booking_contact_name = ?,
    booking_contact_phone = ?, booking_contact_email = ?, booking_note = ?
WHERE booking_id = ? AND booking_updated_at = ? AND booking_deleted_at IS NULL
`

type UpdateBookingParams struct {
	BookingTotalPrice   string
	BookingStatus       int8
	BookingContactName  string
	BookingContactPhone string
	BookingContactEmail string
	BookingNote         sql.NullString
	BookingID           string
	BookingUpdatedAt    sql.NullTime
}

func (q *Queries) UpdateBooking(ctx context.Context, arg UpdateBookingParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, updateBooking,
		arg.BookingTotalPrice,
		arg.BookingStatus,
		arg.BookingContactName,
		arg.BookingContactPhone,
		arg.BookingContactEmail,
		arg.BookingNote,
		arg.BookingID,
		arg.BookingUpdatedAt,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}
