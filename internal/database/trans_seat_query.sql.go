// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: trans_seat_query.sql

package database

import (
	"context"
	"database/sql"
)

const addSeat = `-- name: AddSeat :execresult
INSERT INTO seats (
    bus_id, seat_number, is_available, seat_created_at, seat_updated_at
) VALUES (
    ?, ?, ?, ?, ?
)
`

type AddSeatParams struct {
	BusID         int32
	SeatNumber    string
	IsAvailable   sql.NullBool
	SeatCreatedAt sql.NullTime
	SeatUpdatedAt sql.NullTime
}

func (q *Queries) AddSeat(ctx context.Context, arg AddSeatParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, addSeat,
		arg.BusID,
		arg.SeatNumber,
		arg.IsAvailable,
		arg.SeatCreatedAt,
		arg.SeatUpdatedAt,
	)
}

const deleteForceSeat = `-- name: DeleteForceSeat :exec
DELETE FROM seats WHERE seat_id = ?
`

func (q *Queries) DeleteForceSeat(ctx context.Context, seatID int32) error {
	_, err := q.db.ExecContext(ctx, deleteForceSeat, seatID)
	return err
}

const deleteSeat = `-- name: DeleteSeat :exec
UPDATE seats
SET seat_deleted_at = NOW()
WHERE seat_id = ?
`

func (q *Queries) DeleteSeat(ctx context.Context, seatID int32) error {
	_, err := q.db.ExecContext(ctx, deleteSeat, seatID)
	return err
}

const getSeatById = `-- name: GetSeatById :one
SELECT seat_id, bus_id, seat_number, is_available, seat_created_at, seat_updated_at, seat_deleted_at
FROM ` + "`" + `seats` + "`" + `
WHERE seat_id = ?
`

func (q *Queries) GetSeatById(ctx context.Context, seatID int32) (Seat, error) {
	row := q.db.QueryRowContext(ctx, getSeatById, seatID)
	var i Seat
	err := row.Scan(
		&i.SeatID,
		&i.BusID,
		&i.SeatNumber,
		&i.IsAvailable,
		&i.SeatCreatedAt,
		&i.SeatUpdatedAt,
		&i.SeatDeletedAt,
	)
	return i, err
}

const updateSeat = `-- name: UpdateSeat :execrows
UPDATE seats
SET seat_updated_at = NOW(), seat_number = ?, is_available = ?
WHERE seat_id = ? AND seat_updated_at = ? AND bus_id = ? AND seat_deleted_at IS NULL
`

type UpdateSeatParams struct {
	SeatNumber    string
	IsAvailable   sql.NullBool
	SeatID        int32
	SeatUpdatedAt sql.NullTime
	BusID         int32
}

func (q *Queries) UpdateSeat(ctx context.Context, arg UpdateSeatParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, updateSeat,
		arg.SeatNumber,
		arg.IsAvailable,
		arg.SeatID,
		arg.SeatUpdatedAt,
		arg.BusID,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}
