// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package userwire

import (
	"database/sql"
	"github.com/Noname2812/go-ecommerce-backend-api/internal/services/user/application/command/handler"
	"github.com/Noname2812/go-ecommerce-backend-api/internal/services/user/application/query/handler"
	"github.com/Noname2812/go-ecommerce-backend-api/internal/services/user/infrastructure/messaging"
	"github.com/Noname2812/go-ecommerce-backend-api/internal/services/user/infrastructure/persistence/userinfo"
	"github.com/Noname2812/go-ecommerce-backend-api/internal/services/user/infrastructure/service"
	"github.com/Noname2812/go-ecommerce-backend-api/pkg/kafka"
	"github.com/google/wire"
	"github.com/redis/go-redis/v9"
	"go.uber.org/zap"
)

// Injectors from user.wire.go:

func InitUserQueryHandler(db *sql.DB, logger *zap.Logger) userqueryhandler.UserQueryHandler {
	userInfoRepository := userinforepositoryimpl.NewUserInfoRepository(db)
	userQueryService := userserviceimpl.NewUserQueryService(userInfoRepository)
	userQueryHandler := userqueryhandler.NewUserQueryHandler(userQueryService)
	return userQueryHandler
}

func InitUserCommandHandler(db *sql.DB, logger *zap.Logger, manager *kafka.Manager, redisClient *redis.Client) usercommandhandler.UserCommandHandler {
	userCacheService := userserviceimpl.NewUserCacheService(redisClient)
	userPublisherHandler := useremessagingimpl.NewuserEventPublisher(manager, logger)
	userInfoRepository := userinforepositoryimpl.NewUserInfoRepository(db)
	userCommandService := userserviceimpl.NewUserCommandService(userCacheService, userPublisherHandler, userInfoRepository)
	userCommandHandler := usercommandhandler.NewUserCommandHandler(logger, userCommandService)
	return userCommandHandler
}

// user.wire.go:

var UserRepositorySet = wire.NewSet(userinforepositoryimpl.NewUserInfoRepository)
