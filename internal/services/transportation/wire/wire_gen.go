// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package transportationwire

import (
	"database/sql"
	"github.com/Noname2812/go-ecommerce-backend-api/internal/common/protogen/transportation"
	"github.com/Noname2812/go-ecommerce-backend-api/internal/common/utils/cache"
	"github.com/Noname2812/go-ecommerce-backend-api/internal/services/transportation/application/query/handler"
	"github.com/Noname2812/go-ecommerce-backend-api/internal/services/transportation/infrastructure/persistence"
	"github.com/Noname2812/go-ecommerce-backend-api/internal/services/transportation/infrastructure/service"
	"github.com/dgraph-io/ristretto"
	"github.com/google/wire"
	"github.com/redis/go-redis/v9"
	"go.uber.org/zap"
)

// Injectors from transportation_wire.go:

func InitTransportationQueryHandler(db *sql.DB, rdb *redis.Client, localCache *ristretto.Cache, logger *zap.Logger) transportationqueryhandler.TransportationQueryHandler {
	tripRepository := transportationrepositoryimpl.NewTripRepository(db)
	seatRepository := transportationrepositoryimpl.NewSeatRepository(db)
	tripSeatLockRepository := transportationrepositoryimpl.NewTripSeatLockRepository(db)
	redisCache := cacheservice.NewRedisCache(rdb)
	cacheserviceLocalCache := cacheservice.NewLocalCache(localCache)
	transportationQueryService := transportationserviceimpl.NewTransportationQueryService(tripRepository, seatRepository, tripSeatLockRepository, redisCache, cacheserviceLocalCache, logger)
	transportationQueryHandler := transportationqueryhandler.NewTransportationQueryHandler(transportationQueryService)
	return transportationQueryHandler
}

func InitTransportationServiceServer(db *sql.DB, logger *zap.Logger, redisClient *redis.Client) transportation.TransportationServiceServer {
	tripSeatLockRepository := transportationrepositoryimpl.NewTripSeatLockRepository(db)
	transactionManager := transportationrepositoryimpl.NewTransactionManager(db)
	redisCache := cacheservice.NewRedisCache(redisClient)
	transportationServiceServer := transportationserviceimpl.NewTransportationServiceServer(tripSeatLockRepository, transactionManager, redisCache)
	return transportationServiceServer
}

// transportation_wire.go:

var TransportationRepositorySet = wire.NewSet(transportationrepositoryimpl.NewTripRepository, transportationrepositoryimpl.NewSeatRepository, transportationrepositoryimpl.NewTripSeatLockRepository)
